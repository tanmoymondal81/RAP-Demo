managed;

define behavior for zi_travel01 alias travel

implementation in class zbp_i_travel01 unique
persistent table zdemo_atrav_01
lock master
// This declares the root node as the Authorization Master
authorization master ( instance )

//To achieve optimistic locking
etag master LocalLastChangedAt

{
  create;
  update;
  delete;
  association _booking { create; }

  //  this is a UUID based scenario, we want the managed runtime to provide a key
  //+ when new instances are created.
  //  Hence we need to make the TravelUUID numbering as managed and read-only
  field ( numbering : managed, readonly ) Traveluuid;

  // Add static field control and making fields as read-only
  field ( readonly ) TravelId, TotalPrice, OverallStatus;
  field ( readonly ) LastChangedBy, LastChangedAt, LocalLastChangedAt, CreatedBy, CreatedAt;

  // setting fields as mandatory to show red asterix in the Fiori APP.
  // However this would need the Validation
  field ( mandatory ) AgencyId, CustomerId;

  //  Defining 2 Actions with "dynamic feature control" for approving and rejecting the Travel Request.
  //  Both these actions return $self with Cardinality 1 as the result.
  //  Here $self is the object "ME".
  action ( features : instance ) acceptTravel result [1] $self;
  action ( features : instance ) rejectTravel result [1] $self;

  // Internal Action
  internal action recalcTotalPrice;

  // Determination is triggered on the 'create' operation on 'modify'
  determination setInitialStatus on modify { create; }

  // Determination called on field value change
  determination calculateTotalPrice on modify { field BookingFee, CurrencyCode; }


  // Determination is called during "save" when a new instance is "created" for the determining the TravelId
  determination calculateTravelId on save { create; }


  // Adding validation on the below fields during 'SAVE' when the trigger is 'create' (i.e. a new instance is created)
  validation validateAgency on save { field AgencyId; create; }
  validation validateCustomer on save { field CustomerId; create; }
  validation validateDates on save
  { field BeginDate, EndDate; create; }

  //  since aliases have been specified, we need to define a mapping
  //+ to map the elements of the CDS view to the fields of the database table
  mapping for ZDEMO_ATRAV_01
  {
    Traveluuid = traveluuid;
    TravelId = travel_id;
    AgencyId = agency_id;
    CustomerId = customer_id;
    BeginDate = begin_date;
    EndDate = end_date;
    BookingFee = booking_fee;
    TotalPrice = total_price;
    CurrencyCode = currency_code;
    Description = description;
    OverallStatus = overall_status;
    CreatedBy = created_by;
    CreatedAt = created_at;
    LastChangedBy = last_changed_by;
    LastChangedAt = last_changed_at;
    LocalLastChangedAt = local_last_changed_at;
  }
}


define behavior for zi_book01 alias booking
implementation in class zbp_i_book01 unique

persistent table zdemo_abook_01
lock dependent by _travel
authorization dependent by _travel

//To achieve optimistic locking
etag master LocalLastChangedAt

{
  update;
  delete;

  //In order to "transaction enable",
  //the travel association "explicitly listed" in the booking entity
  association _travel;

  //  this is a UUID based scenario, we want the managed runtime to provide a key
  //+ when new instances are created.
  //  Hence we need to make the BookingUuid numbering as managed and read-only

  field ( numbering : managed, readonly ) BookingUuid;

  // To get rid of a warning message
  field ( readonly ) Traveluuid, BookingId;
  field ( readonly ) CreatedBy, LastChangedBy, LocalLastChangedAt;

  determination calculateBookingID on modify { create; }
  determination calculateTotalPrice on modify { field FlightPrice, CurrencyCode; }

  //  since aliases have been specified, we need to define a mapping
  //+ to map the elements of the CDS view to the fields of the database table
  mapping for zdemo_abook_01
  {
    BookingUuid = booking_uuid;
    TravelUuid = travel_uuid;
    BookingId = booking_id;
    BookingDate = booking_date;
    CustomerId = customer_id;
    CarrierId = carrier_id;
    ConnectionId = connection_id;
    FlightDate = flight_date;
    FlightPrice = flight_price;
    CurrencyCode = currency_code;
    CreatedBy = created_by;
    LastChangedBy = last_changed_by;
    LocalLastChangedAt = local_last_changed_at;
  }
}